<?php
/*
Copyright: © 2009 WebSharks, Inc. ( coded in the USA )
<mailto:support@websharks-inc.com> <http://www.websharks-inc.com/>

Released under the terms of the GNU General Public License.
You should have received a copy of the GNU General Public License,
along with this software. In the main directory, see: /licensing/
If not, see: <http://www.gnu.org/licenses/>.
*/
/*
WARNING: This is a system configuration file, please DO NOT EDIT this file directly!
... Instead, use the plugin options panel in WordPress® to override these settings.
*/
/*
Direct access denial.
*/
if (realpath (__FILE__) === realpath ($_SERVER["SCRIPT_FILENAME"]))
	exit;
/*
Detect if we are inside an MU installation.
*/
if (($GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["is_wpmu"] = function_exists ("wpmu_current_site"))/**/
&& (file_exists (dirname (dirname (__FILE__)) . "/wpmu.farm") || file_exists (TEMPLATEPATH . "/wpmu.farm")))
	$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["is_wpmu_farm"] = true; /* Requires /wpmu.farm file. */
/*
Determine the full url to the directory this plugin resides in.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["dir_url"] = WP_CONTENT_URL . /* URL to the plugin directory. */
preg_replace ("/^(.*?)(\/" . preg_quote (basename (WP_CONTENT_DIR), "/") . ")/", "", dirname (dirname (__FILE__)));
/*
Check if the plugin has been configured *should be set after the first config via options panel*.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["configured"] = get_option ("ws_plugin__s2member_configured");
/*
This is a special option cache that holds some additional information autoloaded into WordPress®.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["cache"] = get_option ("ws_plugin__s2member_cache");
/*
Configure the right menu options panel for this software.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["menu-r"] = array ("tools" => true, "tips" => true, "donations" => true, "installation" => true);
/*
Configure the file modification time for the syscon.inc.php file.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["filemtime"] = filemtime (__FILE__);
/*
Configure the directory for files protected by this plugin.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["files_dir"] = dirname (dirname (__FILE__)) . "-files";
/*
Configure the directory for logs protected by this plugin.
*/
$GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["logs_dir"] = dirname (dirname (__FILE__)) . "-logs";
/*
Configure & validate all of the plugin options; and set their defaults.
*/
function ws_plugin__s2member_configure_options_and_their_defaults ($options = FALSE) /* Can also be used to merge options with defaults. */
	{
		/* Here we build the default options array, which will be merged with the user options.
		It is important to note that sometimes default options may not or should not be pre-filled on an options form.
		These defaults are for the system to use in various ways, we may choose not to pre-fill certain fields.
		In other words, some defaults may be used internally, but to the user, the option will be empty. */
		$default_options = array ( /* Please comment each line for clarity, it is easy to forget things. */
		/**/
		"options_version" => "1.0", /* Used internally to keep runtime files up-to-date. */
		/**/
		"run_deactivation_routines" => "1", /* Should deactivation routines be processed? */
		/**/
		"custom_reg_fields" => "", /* A comma delimited list of custom fields to collect/use. */
		"custom_reg_password" => "0", /* Allow users to register their own custom password? */
		/**/
		"allow_subscribers_in" => "0", /* Allow subscribers to access the login_welcome_page? */
		"force_admin_lockouts" => "0", /* Redirects admin pages/profile to the login_welcome_page. */
		/**/
		"login_welcome_page" => "", /* Preceded by bloginfo("url"). Defaults to the home page. */
		"login_redirection_override" => "", /* Alternate redirection location; instead of the welcome page. */
		"membership_options_page" => "", /* Preceded by bloginfo("url"). Defaults to the home page. */
		"file_download_limit_exceeded_page" => "", /* Preceded by bloginfo("url"). Defaults to the home page. */
		/**/
		"login_reg_background_color" => "FFFFFF", /* Defaults to white, and the bg.png is also white. */
		"login_reg_background_image" => $GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["dir_url"] . "/images/bg.png",/**/
		"login_reg_background_text_color" => "000000", /* Defaults to black, which is high contrast on white. */
		"login_reg_background_text_shadow_color" => "CCCCCC", /* Defaults to gray, which is slightly visible. */
		"login_reg_background_box_shadow_color" => "CCCCCC", /* Defaults to gray, which is slightly visible. */
		/**/
		"login_reg_logo_src" => $GLOBALS["WS_PLUGIN__"]["s2member"]["c"]["dir_url"] . "/images/logo.png",/**/
		"login_reg_logo_src_width" => "500", /* Defaults to the logo_src image width. */
		"login_reg_logo_src_height" => "100", /* Defaults to the logo_src image height. */
		"login_reg_logo_url" => get_bloginfo ("url"), /* Defaults to the site url. */
		"login_reg_logo_title" => get_bloginfo ("name"), /* Defaults to the site name. */
		/**/
		"reg_email_from_name" => get_bloginfo ("name"), /* Defaults to the site name. */
		"reg_email_from_email" => get_bloginfo ("admin_email"), /* Defaults to the admin. */
		/**/
		"paypal_debug" => "0", /* Use the PayPal debug/logs for development testing? */
		"paypal_sandbox" => "0", /* Use the PayPal sandbox for development testing? */
		"paypal_business" => "", /* Paypal business email address for their account. */
		"paypal_identity_token" => "", /* Paypal payment data transfer identity token. */
		/**/
		"signup_tracking_codes" => "", /* s2Member tracking codes injected on signup. */
		/**/
		"signup_email_subject" => "Congratulations! ( your membership has been approved )",/**/
		"signup_email_message" => "Thanks %%first_name%%! Your membership has been approved.\n\nIf you haven't already done so, the next step is to Register a Username.\n\nComplete your registration here:\n%%registration_url%%\n\nIf you have any trouble, please feel free to contact us.\n\nBest Regards,\n" . get_bloginfo ("name"),/**/
		/**/
		"single_page_email_subject" => "Thank You! ( instructions for access )",/**/
		"single_page_email_message" => "Thanks %%first_name%%!\n\n%%item_name%%\n\nYour order can be retrieved here:\n%%sp_access_url%%\n( link expires in %%sp_access_exp%% )\n\nIf you have any trouble, please feel free to contact us.\n\nBest Regards,\n" . get_bloginfo ("name"),/**/
		/**/
		"mailchimp_api_key" => "", /* MailChimp® API Key for MailChimp® integration. */
		"level0_mailchimp_list_ids" => "", /* Comma delimited list of MailChimp® List IDs. */
		"level1_mailchimp_list_ids" => "", /* Comma delimited list of MailChimp® List IDs. */
		"level2_mailchimp_list_ids" => "", /* Comma delimited list of MailChimp® List IDs. */
		"level3_mailchimp_list_ids" => "", /* Comma delimited list of MailChimp® List IDs. */
		"level4_mailchimp_list_ids" => "", /* Comma delimited list of MailChimp® List IDs. */
		/**/
		"level0_aweber_list_ids" => "", /* Comma delimited list of AWeber® List IDs. */
		"level1_aweber_list_ids" => "", /* Comma delimited list of AWeber® List IDs. */
		"level2_aweber_list_ids" => "", /* Comma delimited list of AWeber® List IDs. */
		"level3_aweber_list_ids" => "", /* Comma delimited list of AWeber® List IDs. */
		"level4_aweber_list_ids" => "", /* Comma delimited list of AWeber® List IDs. */
		/**/
		"signup_notification_urls" => "", /* s2Member signup notification urls. */
		"registration_notification_urls" => "", /* s2Member reg notification urls. */
		"payment_notification_urls" => "", /* s2Member payment notification urls. */
		"eot_del_notification_urls" => "", /* s2Member eot/del notification urls. */
		"ref_rev_notification_urls" => "", /* s2Member ref/rev notification urls. */
		"sp_notification_urls" => "", /* s2Member single-page notification urls. */
		/**/
		"level1_label" => "Bronze", /* This is just an initial generic level label. */
		"level2_label" => "Silver", /* This is just an initial generic level label. */
		"level3_label" => "Gold", /* This is just an initial generic level label. */
		"level4_label" => "Platinum", /* This is just an initial generic level label. */
		/**/
		"level1_file_downloads_allowed" => "", /* This should always be numeric or empty. */
		"level2_file_downloads_allowed" => "", /* This should always be numeric or empty. */
		"level3_file_downloads_allowed" => "", /* This should always be numeric or empty. */
		"level4_file_downloads_allowed" => "", /* This should always be numeric or empty. */
		/**/
		"level1_file_downloads_allowed_days" => "", /* This should be numeric or empty. */
		"level2_file_downloads_allowed_days" => "", /* This should be numeric or empty. */
		"level3_file_downloads_allowed_days" => "", /* This should be numeric or empty. */
		"level4_file_downloads_allowed_days" => "", /* This should be numeric or empty. */
		/**/
		"level1_ruris" => "", /* It is ok for these to just be empty strings. */
		"level2_ruris" => "", /* It is ok for these to just be empty strings. */
		"level3_ruris" => "", /* It is ok for these to just be empty strings. */
		"level4_ruris" => "", /* It is ok for these to just be empty strings. */
		/**/
		"level1_catgs" => "", /* It is ok for these to just be empty strings. */
		"level2_catgs" => "", /* It is ok for these to just be empty strings. */
		"level3_catgs" => "", /* It is ok for these to just be empty strings. */
		"level4_catgs" => "", /* It is ok for these to just be empty strings. */
		/**/
		"level1_ptags" => "", /* It is ok for these to just be empty strings. */
		"level2_ptags" => "", /* It is ok for these to just be empty strings. */
		"level3_ptags" => "", /* It is ok for these to just be empty strings. */
		"level4_ptags" => "", /* It is ok for these to just be empty strings. */
		/**/
		"level1_posts" => "", /* It is ok for these to just be empty strings. */
		"level2_posts" => "", /* It is ok for these to just be empty strings. */
		"level3_posts" => "", /* It is ok for these to just be empty strings. */
		"level4_posts" => "", /* It is ok for these to just be empty strings. */
		/**/
		"level1_pages" => "", /* It is ok for these to just be empty strings. */
		"level2_pages" => "", /* It is ok for these to just be empty strings. */
		"level3_pages" => "", /* It is ok for these to just be empty strings. */
		"level4_pages" => "", /* It is ok for these to just be empty strings. */
		/**/
		"single_pages" => "", /* It is ok for these to just be empty strings. */
		/**/
		"membership_eot_behavior" => "demote"); /* Demote or delete Members? */
		/*
		Here they are merged. user options will overwrite some or all default values. 
		*/
		$GLOBALS["WS_PLUGIN__"]["s2member"]["o"] = array_merge ($default_options, (($options !== false) ? (array)$options : (array)get_option ("ws_plugin__s2member_options")));
		/*
		Backward compatibility for `signup_pixel_tracking_codes`, which was renamed to `signup_tracking_codes` in v2.8.6.
		*/
		if ($GLOBALS["WS_PLUGIN__"]["s2member"]["o"]["signup_pixel_tracking_codes"])
			$GLOBALS["WS_PLUGIN__"]["s2member"]["o"]["signup_tracking_codes"] = $GLOBALS["WS_PLUGIN__"]["s2member"]["o"]["signup_pixel_tracking_codes"];
		/*
		Backward compatibility for `login_reg_logo_src`, which was resized to 500px wide in v2.8.6.
		*/
		if ($GLOBALS["WS_PLUGIN__"]["s2member"]["o"]["login_reg_logo_src"] === $default_options["login_reg_logo_src"])
			$GLOBALS["WS_PLUGIN__"]["s2member"]["o"]["login_reg_logo_src_width"] = $default_options["login_reg_logo_src_width"];
		/*
		Validate each option, possibly reverting back to the default value if invalid.
		Also check if options were passed in on some of these, in case empty values are to be allowed. 
		*/
		foreach ($GLOBALS["WS_PLUGIN__"]["s2member"]["o"] as $key => &$value)
			{
				if (!is_array ($value))
					$value = trim (stripslashes ($value));
				else /* A string, or an array of strings. */
					foreach ($value as $k => $v)
						$value[$k] = trim (stripslashes ($v));
				/**/
				if (!isset ($default_options[$key]))
					unset ($GLOBALS["WS_PLUGIN__"]["s2member"]["o"][$key]);
				/**/
				else if ($key === "options_version" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "run_deactivation_routines" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "custom_reg_fields" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "custom_reg_password" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "allow_subscribers_in" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "force_admin_lockouts" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_welcome_page" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_redirection_override" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "membership_options_page" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "file_download_limit_exceeded_page" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_background_color" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_background_image" && !is_string ($value)) /* This is optional. */
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_logo_src" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_logo_src_width" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_logo_src_height" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_logo_url" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "login_reg_logo_title" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "reg_email_from_name" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "reg_email_from_email" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "paypal_debug" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "paypal_sandbox" && (!is_string ($value) || !is_numeric ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "paypal_business" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "paypal_identity_token" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "signup_tracking_codes" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "signup_email_subject" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "signup_email_message" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "single_page_email_subject" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "single_page_email_message" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "mailchimp_api_key" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[0-4]_mailchimp_list_ids$/", $key) && (!is_string ($value) || !strlen ($value = preg_replace ("/\s+/", "", $value))))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[0-4]_aweber_list_ids$/", $key) && (!is_string ($value) || !strlen ($value = preg_replace ("/\s+/", "", $value))))
					$value = $default_options[$key];
				/**/
				else if ($key === "signup_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "registration_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "payment_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "eot_del_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "ref_rev_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "sp_notification_urls" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "level1_label" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "level2_label" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "level3_label" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if ($key === "level4_label" && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_file_downloads_allowed$/", $key) && (!is_string ($value) || !is_numeric ($value) || $value < 0))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_file_downloads_allowed_days$/", $key) && (!is_string ($value) || !is_numeric ($value) || $value < 0))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_ruris$/", $key) && (!is_string ($value) || !strlen ($value)))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_catgs$/", $key) && (!is_string ($value) || !($value = (($value === "all") ? $value : preg_replace ("/[^0-9,]/", "", $value)))))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_ptags$/", $key) && (!is_string ($value) || !($value = (($value === "all") ? $value : strtolower (preg_replace ("/( +)/", " ", trim (preg_replace ("/( *),( *)/", ",", $value))))))))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_posts$/", $key) && (!is_string ($value) || !($value = (($value === "all") ? $value : preg_replace ("/[^0-9,]/", "", $value)))))
					$value = $default_options[$key];
				/**/
				else if (preg_match ("/level[1-4]_pages$/", $key) && (!is_string ($value) || !($value = (($value === "all") ? $value : preg_replace ("/[^0-9,]/", "", $value)))))
					$value = $default_options[$key];
				/**/
				else if ($key === "single_pages" && (!is_string ($value) || !($value = preg_replace ("/[^0-9,]/", "", $value))))
					$value = $default_options[$key];
				/**/
				else if ($key === "membership_eot_behavior" && (!is_string ($value) || !preg_match ("/^(demote|delete)$/", $value)))
					$value = $default_options[$key];
			}
		/**/
		return $GLOBALS["WS_PLUGIN__"]["s2member"]["o"];
	}
/*
Now lets call the function.
*/
call_user_func ("ws_plugin__s2member_configure_options_and_their_defaults");
?>